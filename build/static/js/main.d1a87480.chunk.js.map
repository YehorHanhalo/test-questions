{"version":3,"sources":["App.tsx","components/Div/Div.tsx","reportWebVitals.ts","index.tsx","components/Div/Div.module.css","App.module.css"],"names":["divHeight","Div","useState","window","innerWidth","screenWidth","setScreenWidth","getWindowWidth","useEffect","addEventListener","removeEventListener","divRef","useRef","rootDivHeight","setRootDivHeight","handleChangeInput","useCallback","e","target","value","useLayoutEffect","current","heightWithPx","getComputedStyle","height","parseInt","divInlineStyle","useMemo","ref","className","styles","divStep1","style","onChange","setDivHeight","App","section","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uJASIA,E,sEC4CWC,EA9CW,SAAC,GAAmB,IAAjBD,EAAgB,EAAhBA,UAAgB,EAGLE,mBAAiBC,OAAOC,YAHnB,mBAGpCC,EAHoC,KAGvBC,EAHuB,KAKrCC,EAAiB,WACrBD,EAAeH,OAAOC,aAGxBI,qBAAU,WAER,OADAL,OAAOM,iBAAiB,SAAUF,GAC3B,kBAAMJ,OAAOO,oBAAoB,SAAUH,MACjD,IAIH,IAAMI,EAASC,iBAAuB,MAhBK,EAkBDV,mBAAiBF,GAlBhB,mBAkBpCa,EAlBoC,KAkBrBC,EAlBqB,KAmBrCC,EAAoBC,uBAAY,SAACC,GAAD,OAAsCH,GAAkBG,EAAEC,OAAOC,SAAQ,IAE/GC,2BAAgB,WACd,GAAIT,EAAOU,QAAS,CAClB,IAAMC,EAAeC,iBAAiBZ,EAAOU,SAASG,OAChDA,EAASC,SAASH,GACxBR,EAAiBU,MAElB,CAACb,IAEJ,IAAMe,EAAiBC,mBAAQ,iBAAO,CACpCH,OAAQX,KACN,CAACA,IAGL,OACE,sBACEe,IAAKjB,EACLkB,UAAWC,IAAOC,SAClBC,MAAON,EAHT,UAKE,kDAAqBrB,KACrB,uBAAOc,MAAON,EAAeoB,SAAUlB,Q,gBDtC7CZ,OAAO+B,aAAe,SAACV,GAAD,OAAoBxB,EAAYwB,GAcvCW,MAZf,WAGE,OAFAhC,OAAO+B,aAAa,KAGlB,mCACA,yBAASL,UAAWC,IAAOM,QAA3B,SACE,cAAC,EAAD,CAAKpC,UAAWA,SEJPqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,QAAU,qBAAqB,SAAW,wB,kBCA5DD,EAAOC,QAAU,CAAC,QAAU,wB","file":"static/js/main.d1a87480.chunk.js","sourcesContent":["import Div from './components/Div'\nimport styles from './App.module.css';\n\ndeclare global {\n  interface Window {\n    setDivHeight(height: number): void;\n  }\n}\n\nlet divHeight: number;\nwindow.setDivHeight = (height: number) => divHeight = height;\n\nfunction App() {\n  window.setDivHeight(100)\n\n  return (\n    <>\n    <section className={styles.section}>\n      <Div divHeight={divHeight} />\n    </section>\n    </>\n  );\n}\n\nexport default App;\n","import { useState, useEffect, useLayoutEffect, useCallback, useMemo, useRef, ChangeEvent, FC } from 'react';\nimport styles from './Div.module.css';\n\ninterface DivProps {\n    divHeight: number;\n}\n\nconst Div: FC<DivProps> = ({ divHeight }) => {\n\n  // ========step 1=========\n  const [screenWidth, setScreenWidth] = useState<number>(window.innerWidth)\n\n  const getWindowWidth = () => {\n    setScreenWidth(window.innerWidth)\n  }\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", getWindowWidth)\n    return () => window.removeEventListener(\"resize\", getWindowWidth)\n  }, [])\n  // =======================\n\n  // ========step 2=========\n  const divRef = useRef<HTMLDivElement>(null)\n\n  const [rootDivHeight, setRootDivHeight] = useState<number>(divHeight)\n  const handleChangeInput = useCallback((e: ChangeEvent<HTMLInputElement>) => setRootDivHeight(+e.target.value), [])\n\n  useLayoutEffect(() => {\n    if (divRef.current) {\n      const heightWithPx = getComputedStyle(divRef.current).height\n      const height = parseInt(heightWithPx)\n      setRootDivHeight(height)\n    }\n  }, [divRef])\n\n  const divInlineStyle = useMemo(() => ({\n    height: rootDivHeight,\n  }), [rootDivHeight])\n  // =======================\n\n  return (\n    <div\n      ref={divRef}\n      className={styles.divStep1}\n      style={divInlineStyle}\n    >\n      <span>Screen width: {screenWidth}</span>\n      <input value={rootDivHeight} onChange={handleChangeInput} />\n    </div>\n  );\n}\n\nexport default Div;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Div_section__1Qqoq\",\"divStep1\":\"Div_divStep1__1RFCm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"App_section__1OL6S\"};"],"sourceRoot":""}